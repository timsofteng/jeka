// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: jeka.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Jeka_GetRandomText_FullMethodName    = "/Jeka/GetRandomText"
	Jeka_CreateRandomText_FullMethodName = "/Jeka/CreateRandomText"
	Jeka_GetRandomImg_FullMethodName     = "/Jeka/GetRandomImg"
	Jeka_GetRandomVideo_FullMethodName   = "/Jeka/GetRandomVideo"
)

// JekaClient is the client API for Jeka service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JekaClient interface {
	GetRandomText(ctx context.Context, in *GetRandomTextRequest, opts ...grpc.CallOption) (*GetRandomTextResponse, error)
	CreateRandomText(ctx context.Context, in *CreateRandomTextRequest, opts ...grpc.CallOption) (*CreateRandomTextResponse, error)
	GetRandomImg(ctx context.Context, in *GetRandomImgRequest, opts ...grpc.CallOption) (*GetRandomImgResponse, error)
	GetRandomVideo(ctx context.Context, in *GetRandomVideoRequest, opts ...grpc.CallOption) (*GetRandomVideoResponse, error)
}

type jekaClient struct {
	cc grpc.ClientConnInterface
}

func NewJekaClient(cc grpc.ClientConnInterface) JekaClient {
	return &jekaClient{cc}
}

func (c *jekaClient) GetRandomText(ctx context.Context, in *GetRandomTextRequest, opts ...grpc.CallOption) (*GetRandomTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomTextResponse)
	err := c.cc.Invoke(ctx, Jeka_GetRandomText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jekaClient) CreateRandomText(ctx context.Context, in *CreateRandomTextRequest, opts ...grpc.CallOption) (*CreateRandomTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRandomTextResponse)
	err := c.cc.Invoke(ctx, Jeka_CreateRandomText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jekaClient) GetRandomImg(ctx context.Context, in *GetRandomImgRequest, opts ...grpc.CallOption) (*GetRandomImgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomImgResponse)
	err := c.cc.Invoke(ctx, Jeka_GetRandomImg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jekaClient) GetRandomVideo(ctx context.Context, in *GetRandomVideoRequest, opts ...grpc.CallOption) (*GetRandomVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomVideoResponse)
	err := c.cc.Invoke(ctx, Jeka_GetRandomVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JekaServer is the server API for Jeka service.
// All implementations must embed UnimplementedJekaServer
// for forward compatibility
type JekaServer interface {
	GetRandomText(context.Context, *GetRandomTextRequest) (*GetRandomTextResponse, error)
	CreateRandomText(context.Context, *CreateRandomTextRequest) (*CreateRandomTextResponse, error)
	GetRandomImg(context.Context, *GetRandomImgRequest) (*GetRandomImgResponse, error)
	GetRandomVideo(context.Context, *GetRandomVideoRequest) (*GetRandomVideoResponse, error)
	mustEmbedUnimplementedJekaServer()
}

// UnimplementedJekaServer must be embedded to have forward compatible implementations.
type UnimplementedJekaServer struct {
}

func (UnimplementedJekaServer) GetRandomText(context.Context, *GetRandomTextRequest) (*GetRandomTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomText not implemented")
}
func (UnimplementedJekaServer) CreateRandomText(context.Context, *CreateRandomTextRequest) (*CreateRandomTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRandomText not implemented")
}
func (UnimplementedJekaServer) GetRandomImg(context.Context, *GetRandomImgRequest) (*GetRandomImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomImg not implemented")
}
func (UnimplementedJekaServer) GetRandomVideo(context.Context, *GetRandomVideoRequest) (*GetRandomVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomVideo not implemented")
}
func (UnimplementedJekaServer) mustEmbedUnimplementedJekaServer() {}

// UnsafeJekaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JekaServer will
// result in compilation errors.
type UnsafeJekaServer interface {
	mustEmbedUnimplementedJekaServer()
}

func RegisterJekaServer(s grpc.ServiceRegistrar, srv JekaServer) {
	s.RegisterService(&Jeka_ServiceDesc, srv)
}

func _Jeka_GetRandomText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JekaServer).GetRandomText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jeka_GetRandomText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JekaServer).GetRandomText(ctx, req.(*GetRandomTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jeka_CreateRandomText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRandomTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JekaServer).CreateRandomText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jeka_CreateRandomText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JekaServer).CreateRandomText(ctx, req.(*CreateRandomTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jeka_GetRandomImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JekaServer).GetRandomImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jeka_GetRandomImg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JekaServer).GetRandomImg(ctx, req.(*GetRandomImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jeka_GetRandomVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JekaServer).GetRandomVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jeka_GetRandomVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JekaServer).GetRandomVideo(ctx, req.(*GetRandomVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jeka_ServiceDesc is the grpc.ServiceDesc for Jeka service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jeka_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Jeka",
	HandlerType: (*JekaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomText",
			Handler:    _Jeka_GetRandomText_Handler,
		},
		{
			MethodName: "CreateRandomText",
			Handler:    _Jeka_CreateRandomText_Handler,
		},
		{
			MethodName: "GetRandomImg",
			Handler:    _Jeka_GetRandomImg_Handler,
		},
		{
			MethodName: "GetRandomVideo",
			Handler:    _Jeka_GetRandomVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jeka.proto",
}
